<%# 공통 부분 %>
<%- include('../../layout/common.ejs') %>

<%# CSS & JS %>
<link href="/css/dataTables.bootstrap5.min.css" rel="stylesheet" />
<link href="/css/select.dataTables.min.css" rel="stylesheet" />
<link href="/css/responsive.dataTables.min.css" rel="stylesheet" />
<link href="/css/fixedColumns.dataTables.min.css" rel="stylesheet" />
<link href="/css/fixedHeader.dataTables.min.css" rel="stylesheet" />
<link href="/css/buttons.dataTables.min.css" rel="stylesheet" />
<link href="/css/scroller.dataTables.min.css" rel="stylesheet" />
<link href="/stylesheets/datatable.css" rel="stylesheet" />
<link href="/stylesheets/trip.css" rel="stylesheet" />

<%# JS %>
<script src="/js/dataTables.min.js"></script>
<script src="/js/dataTables.bootstrap5.min.js"></script>
<script src="/js/dataTables.select.js"></script>
<script src="/js/select.dataTables.js"></script>
<script src="/js/dataTables.responsive.js"></script>
<script src="/js/responsive.dataTables.js"></script>
<script src="/js/dataTables.fixedColumns.js"></script>
<script src="/js/fixedColumns.dataTables.js"></script>
<script src="/js/dataTables.fixedHeader.js"></script>
<script src="/js/fixedHeader.dataTables.js"></script>
<script src="/js/dataTables.buttons.min.js"></script>
<script src="/js/buttons.dataTables.min.js"></script>
<script src="/js/dataTables.scroller.min.js"></script>
<script src="/js/scroller.dataTables.min.js"></script>
<script src="/js/buttons.html5.min.js"></script>
<script src="/jszip.min.js"></script>
<script src="/javascripts/datatableOption.js"></script>
<script src="/javascripts/findAddress.js"></script>
<script src="/javascripts/tripDetail.js"></script>
<script src="//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js"></script>
<script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=84f0433de152103dd787295b55352a78"></script>

<%# 본문 %>
<%- contentFor('body') %>

<%# DataTable CheckBox Visible %>
<input type="hidden" id="tripGuid" value='<%= tripGuid %>'>
<input type="hidden" id="itemNameList" value='<%= itemNameList %>'>

<%# 메뉴명 & 버튼 %>
<div class="d-flex">
  <div class="ps-1">
    <h2><%=tripName%></h2>
  </div>
  <div class="d-flex ms-auto">
    <div>
      <button type="button" id="btnViewList" class="btn btn-success" onclick="viewList()">리스트 보기</button>
    </div>
    <div class="ms-1">
      <button type="button" id="btnCreate" class="btn btn-primary" onclick="createItem()">등록</button>      
    </div>    
    <div class="ms-1">
      <button type="button" class="btn btn-secondary" onclick="closeItem()">닫기</button>
    </div>
    <div class="ms-1">
      <button class="context-menu-tripDetail btn btn-light p-0">
        <img src="/images/download.png" style="height: 37.8px;">
      </button>
    </div>
  </div>
</div>

<%# 지도 및 우측 그리드%>
<div class="map-outer">
  <%# 지도 %>
  <%- include('../../ejs/loadingbar.ejs') %>
  <div class="map_wrap">
    <div id="map"></div>
    <!-- 지도타입 컨트롤 div 입니다 -->
    <div class="map-btn-control">
      <button id="btnSkyView" class="btn btn-sm btn-primary map-btn map-active" onclick="setMapType(this, event)">스카이뷰</button>
      <button id="btnUseDistrict" class="btn btn-sm btn-warning overlay-btn" onclick="setOverlayMapTypeId(this, event, 'use_district')">지적도</button>
      <button id="btnSpeechBubble" class="btn btn-sm btn-success bubble-btn" onclick="setSpeechBubble(this, event)">말풍선 ON</button>
    </div>
    <!-- 현재 위치 버튼 -->
    <div class="compass-btn-control">
      <button id="btnSpeechBubble" class="btn btn-sm btn-light" onclick="setGeoLocation(this, event)"><i class="fa fa-2x fa-map-marker"></i></button>
    </div>    
    <!-- 지도 확대, 축소 컨트롤 div 입니다 -->
    <div class="zoom-control radius_border"> 
      <span onclick="zoomIn()"><img src="https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/ico_plus.png" alt="확대"></span>  
      <span onclick="zoomOut()"><img src="https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/ico_minus.png" alt="축소"></span>
    </div>      
  </div>
  <%# 그리드 테이블 %>
  <div class="table-outer ms-2">
    <%- include('../../ejs/loadingbar.ejs') %>    
    <%# 그리드 %>
    <table id="tblMain" class="table table-striped">
    </table>  
  </div>
</div>

<%# 출장 상세 등록,수정 %>
<div class="modal fade" id="modalTripDetail" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
  aria-labelledby="lblModalTripDetail" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">

      <!-- LoadingBar Modal of modalTripDetail -->
      <%- include('../../ejs/loadingbar.ejs') %>

        <!-- Modal Header -->
        <div class="modal-header">
          <h5 class="modal-title" id="lblModalTripDetail">출장 상세</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>

        <!-- Modal body -->
        <div class="modal-body">
          <form id="tripDetailForm" class="needs-validation" style="height: 60vh; overflow-x: hidden; overflow-y: auto;" novalidate>
            <input type="hidden" id="tripDetailGuid" value="">
            <input type="hidden" id="compYn" value="N">
            <button type="submit" id="btnSaveTripDetail" class="visually-hidden" onclick="saveTripDetail(this, event, '/business/trip/detailmap')"></button>
            <button type="submit" id="btnConfirmTripDetail" class="visually-hidden" onclick="confirmTripDetail(this, event, '/business/trip/detailmap')"></button>

            <div id="carouselOuter" class="carousel slide">
              <div class="carousel-inner">           
              </div>
              <button class="carousel-control-prev" type="button" data-bs-target="#carouselOuter" data-bs-slide="prev">
                <span class="carousel-control-prev-icon"></span>
                <span class="visually-hidden">Previous</span>
              </button>
              <button class="carousel-control-next" type="button" data-bs-target="#carouselOuter" data-bs-slide="next">
                <span class="carousel-control-next-icon"></span>
                <span class="visually-hidden">Next</span>
              </button>
            </div>

            <div class="input-group mb-3 mt-3">
              <span class="input-group-text"><i class="fa fa-suitcase"></i></span>
              <div class="form-floating has-validation">
                <input type="text" id="facilityName" class="form-control edit-mode" placeholder="명칭" onkeypress="enterKey(event, 'btnSaveTripDetail')" required>
                <label class="form-control read-label read-mode hide"></label>
                <label for="facilityName">명칭</label>
              </div>
              <div class="invalid-feedback">
                명칭을 입력하세요.
              </div>                
            </div>

            <div class="input-group mb-3">
              <span class="input-group-text"><i class="fa fa-building"></i></span>
              <div class="form-floating has-validation">
                <input type="text" id="address" class="form-control edit-mode" placeholder="주소" onkeypress="enterKey(event, 'btnSaveTripDetail')" required>
                <label class="form-control read-label read-mode hide"></label>           
                <button type="button" class="btn btn-sm btn-warning read-mode hide" style="position: absolute; top:-10px; right:60px;" onclick="openKakaoRoadMap(this, event, 'Y');">로드맵</button>               
                <button type="button" class="btn btn-sm btn-success read-mode hide" style="position: absolute; top:-10px; right:10px;" onclick="openFindLocation(this, event, 'Y');">도착</button>            
                <button type="button" class="btn btn-sm btn-success edit-mode" style="position: absolute; top:-10px; right:10px;" onclick="openKakaoMap(this, event, 'Y');">주소 변경</button>                                
                <label for="address">주소</label>
              </div>
              <div class="invalid-feedback">
                주소를 입력하세요.
              </div>                
            </div>
                        
            <div class="input-group mb-3">
              <span class="input-group-text"><i class="fa fa-building-o"></i></span>
              <div class="form-floating has-validation">
                <input type="text" id="addressDetail" class="form-control edit-mode" placeholder="상세주소" onkeypress="enterKey(event, 'btnSaveTripDetail')">
                <label class="form-control read-label read-mode hide"></label>
                <label for="addressDetail">상세주소</label>
              </div>
              <div class="invalid-feedback">
                상세주소를 입력하세요.
              </div>                
            </div>

            <div class="input-group mb-3">
              <span class="input-group-text"><i class="fa fa-map-pin"></i></span>
              <div class="form-floating has-validation">
                <input type="number" step="any" id="latitude" class="form-control" placeholder="위도" onkeypress="enterKey(event, 'btnSaveTripDetail')" value="0" readonly>
                <label for="latitude">위도</label>
              </div>
              <div class="invalid-feedback">
                위도를 입력하세요.
              </div>                
            </div>            

            <div class="input-group mb-3">
              <span class="input-group-text"><i class="fa fa-map-pin"></i></span>
              <div class="form-floating has-validation">
                <input type="number" step="any" id="longitude" class="form-control" placeholder="경도" onkeypress="enterKey(event, 'btnSaveTripDetail')" value="0" readonly>
                <label for="longitude">경도</label>
              </div>
              <div class="invalid-feedback">
                경도를 입력하세요.
              </div>                
            </div>       
            
            <%# 가변 출장 항목 %>      
          </form>
        </div>

        <!-- Modal footer -->
        <div class="modal-footer">
          <button type="button" id="btnConfirm" class="btn btn-secondary visually-hidden" onclick="document.getElementById('btnConfirmTripDetail').click();">확인</button>
          <button type="button" id="btnSave" class="btn btn-primary visually-hidden" onclick="document.getElementById('btnSaveTripDetail').click();">저장</button>
          <button type="button" id="btnEdit" class="btn btn-warning" onclick="editModalTripDetail(this, event)">수정</button>          
          <button type="button" class="btn btn-danger" data-bs-dismiss="modal">닫기</button>
        </div>

    </div>
  </div>
</div>

<%# 출장 상세 마커 선택창 %>
<div class="modal fade" id="modalDuplicateMarker" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
  aria-labelledby="lblModalDuplicateMarker" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">

      <!-- LoadingBar Modal of modalTripDetail -->
      <%- include('../../ejs/loadingbar.ejs') %>

        <!-- Modal Header -->
        <div class="modal-header">
          <h5 class="modal-title" id="lblModalDuplicateMarker">중복 마커 선택</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>

        <!-- Modal body -->
        <div class="modal-body">
          <form class="needs-validation" novalidate>
            <input type="hidden" id="tripDetailGuid" value="">
            <button type="submit" id="btnDuplicateMarker" class="visually-hidden" onclick="selectDuplicateMarker(this, event)"></button>

            <div id="item-line" class="mt-2">
              <table id="tblMarkers" class="table table-striped">
              </table>              
            </div>   

          </form>
        </div>

        <!-- Modal footer -->
        <div class="modal-footer">
          <button type="button" class="btn btn-primary"
          onclick="document.getElementById('btnDuplicateMarker').click();">선택</button>
          <button type="button" class="btn btn-danger" data-bs-dismiss="modal">닫기</button>
        </div>

    </div>
  </div>
</div>

<script>
  var table = {};
  var fileNo = 0;
  var filesArr = [];
  var initTripDetailGuid = '<%= tripDetailGuid %>';
  var tripName = '<%= tripName %>';
  var map;
  var markerPos = [];
  var markerInfoList = [];
  var center;
  var curMarkerInfo;
  var currentOverlayTypeId; // 지도에 추가된 지도타입정보를 가지고 있을 변수입니다
  var isOverlayOn = false; //지도타입(지적도 등) 버튼이 클릭된 상태 변수
  var isSkyView = false; //지도 또는 스카이뷰 상태 변수
  var isSpeechBubble = false; //말풍선 상태변수  
  var tableMarkers = {};
  var isReadStatus = false;

  $(document).ready( function () {
    //모달 초기화
    InitModalTripDetail();

    //DataTable.js
    InitDataTableJS('tblMain', '/business/trip/getTripDetailList');     

    //핀 목록 데이터 가져오기
    getDetailListForPin();    
  });

  const columnDefs = [
    { targets: "_all", className: "header" },
    { targets: 0, orderable: false, searchable: false, className: 'control', render: false, },
    { targets: 1, orderable: false, render: false },    
  ];

  //상세보기 열기
  function OpenTripDetailModal(eThis){
    const rowData = table.row(eThis).data();
    let tripDetailGuid = rowData.TRIP_DTL_GUID;
    let column = table.column(eThis).dataSrc();

    switch(column){
      default:
        getItem(tripDetailGuid);
        break;
    }
  };

  //레코드 선택:마커
  function ClickRecord(eThis){
    const rowData = table.row(eThis).data();
    let tripDetailGuid = rowData.TRIP_DTL_GUID;
    if(!isEmpty(markerInfoList)){
      var markerInfo = markerInfoList.find(x => x.intgYn == 'N' && x.tripDetailGuid == tripDetailGuid);
      MoveMarker(markerInfo, tripDetailGuid);     
    }
  };

  //그리드 바인딩
  function InitDataTableJS(tblId, url){
    var columns = [];
    var columnNames = [];
    var exportColumns = [];
    var gridDate = [];
    var select = {};

    $.ajax({
        url: url,
        method: 'post',
        data: {
          'tripGuid': $("#tripGuid").val()
        },
        success: function(data){
          if(isEmpty(data) || (isEmpty(data.value) && isEmpty(data.columnNames))){
            gridData = null;

            //줄여보기 및 체크박스
            columns.push({title: '', data : null, name: 'DTL',  defaultContent: '', width: "0px", visible: false });
            columns.push({title: '', data : null, name: 'CHK', width: "0px", visible: false });  
            
            columns.push(getDataInfoFromColName('ODR'));
            columns.push(getDataInfoFromColName('FCLT_NM'));
          }
          else{
            if(isEmpty(data.value)){
              gridData = null;
              columnNames = Object.values(data.columnNames);
            }
            else{
              gridData = data.value;
              gridData = addoriginalAddress(gridData);
              gridData = changeImageData(gridData);
              columnNames = Object.keys(gridData[0]);      
            }

            //줄여보기 및 체크박스
            columns.push({title: '', data : null, defaultContent: '', width: "0px", visible: false });
            columns.push({title: '', data : null, width: "0px", visible: false });
            
            for(var col = 0; col < columnNames.length; col++) {
              var data = getDataInfoFromColName(columnNames[col]);
              columns.push(data);

              if(!['TRIP_MST_GUID','TRIP_DTL_GUID','ADDR_ORG','COMP_YN','IMG_CNT','TRIP_DTL_GUID_IN_ITM','REG_EMAIL','REG_DT','UPDT_EMAIL','UPDT_DT'].includes(columnNames[col])){
                exportColumns.push(columnNames[col] + ':name');
              }              
            }

            columnDefs.push({ targets: ['NO:name'], className: "row-right-align" });
            columnDefs.push({ targets: ['TTL:name'], className: "row-left-align" });
            columnDefs.push({ targets: ['REG_EMAIL:name','REG_DT:name', 'IMG_CNT:name'] , className: "row-center-align align-middle" });
          }
        },
        beforeSend: function (xhr) {
          setLoadingBar(true);
        },
        complete: function () {
          setLoadingBar(false);

          table = new DataTable('#' + tblId, {
            data: gridData,
            columns: columns,
            columnDefs: columnDefs,             
            language : getLanguage(),
            paging: true,
            lengthChange: true,
            searching: false,
            ordering: true,
            info: true,            
            // scrollCollapse: true,
            autoWidth: false,
            select: {
              style: 'single',
              items: 'row',
            },                     
            scrollX: true,
            scrollY: 'calc(100vh - 482px)',
            // responsive: true,            
            fixedColumns: false,    
            order: [[2, 'asc']],     
            destroy: true,     
            scroller: true,
            buttons: [
              {
                filename: tripName,
                title: null,
                extend: 'excel',
                class: 'buttons-excel',
                exportOptions: {
                  // columns: ':visible:not(:first-child)'
                  columns: exportColumns,
                  modifier: {
                    selected: 'undefined',
                    focused: 'undefined',
                  },
                  format: {
                    body: function(data, row, column, node) {
                      //명칭인 경우
                      if(column == 5){
                        data = data.replace(/<div class='d-flex align-items-center'><span class='me-2'>/g, '' );                        
                        data = data.replace(/<\/span>/g, '');
                        data = data.replace(/<span class='badge text-bg-secondary ms-auto'>확인완료/g, '' );
                        data = data.replace(/<span class='badge text-bg-secondary ms-auto'>/g, '' );
                        data = data.replace(/<\/div>/g, '' );
                      }

                      return data;
                    }
                  },               
                },
              }
            ],
            createdRow: function(row, data, dataIndex){
              //위도,경도가 0인 경우 또는 주소가 빈칸인 경우
              if(data.LAT == 0 || data.LNG == 0 || data.ADDR_ORG.trim() == '')
              {
                $(row).addClass('text-danger');
              }
            }                    
          });
          
          //Double Click Event
          $('#tblMain tbody').on('click', 'tr.selected', function(e) {
            OpenTripDetailModal($(this));
          }); 

          //Click Event
          $('#tblMain tbody').on('click', 'tr', function(e) {
            ClickRecord($(this));
          });         
          
          //재선택 시, De-Select 되지 않기
          table.on('user-select', function (e, dt, type, cell, originalEvent) {
            if ($(cell.node()).parent().hasClass('selected')) {
                e.preventDefault();
            }
          });

          //선택된 상세 GUID가 존재하는 경우, 선택 이벤트 발생
          if(initTripDetailGuid != ''){
            var rowIndex = table.row(searchFunction({TRIP_DTL_GUID:initTripDetailGuid})).index();
            table.row(rowIndex).scrollTo().select();            
          }          
          else{
            //첫번째 레코드 선택
            table.row(':eq(0)').select();
          }          
        }   
    });
  };

  //원본 주소 값 컬럼 추가
  function addoriginalAddress(dataList){
    for(var i = 0; i < dataList.length;i++){
      dataList[i].ADDR_ORG = dataList[i].ADDR;
    }

    return dataList;
  };

  //명칭에 확인 버튼추가, 주소 버튼, 사진 icon으로 변경
  function changeImageData(gridData){
    for(var i = 0; i< gridData.length; i++){

      //명칭에 확인표시 추가
      if(gridData[i].COMP_YN == 'Y'){
        var confirmCode = "<div class='d-flex align-items-center'>";
        confirmCode += "<span class='me-2'>" + gridData[i].FCLT_NM + "</span>";
        confirmCode += "<span class='badge text-bg-secondary ms-auto'>확인완료</span>";
        confirmCode += "</div>";
        gridData[i].FCLT_NM = confirmCode;       
      }  

      //이미지 디코드(모바일에서 이미지 업로드한 경우, Encoding되서 들어간 상태이기 때문에)
      if(gridData[i].IMGS != null){
        gridData[i].IMGS = decodeURI(gridData[i].IMGS);
      }      
    }

    return gridData;
  };

  //컬럼에 따라 DataTable.js 컬럼 반환
  function getDataInfoFromColName(colName){
    let info = {};
    switch(colName){
      case 'ODR':
        info = {
          title: '번호',
          name: colName,
          data: colName,
          width: '50px',
        };
        break;
      case 'FCLT_NM':
        info = {
          title: '명칭',
          name: colName,
          data: colName,          
          width: '200px',
        };
        break;        
      case 'ADDR':
        info = {
          title: '주소',
          name: colName,
          data: colName,
          width: '300px',
          visible: false,
        };
        break;      
      case 'ADDR_DTL':
        info = {
          title: '상세주소',
          name: colName,
          data: colName,
          width: '200px',
          visible: false,
        };
        break;                
      case 'LAT':
        info = {
          title: '위도',
          name: colName,
          data: colName,
          width: '100px',
          visible: false,
        };
        break;            
      case 'LNG':
        info = {
          title: '경도',
          name: colName,
          data: colName,
          width: '100px',
          visible: false,
        };
        break;      
      case 'IMG_CNT':
        info = {
          title: '사진',
          name: colName,
          data: colName,
          width: '100px',
          visible: false,
        };
        break;      
      case 'IMGS':
        info = {
          title: '이미지',
          name: colName,
          data: colName,
          width: '100px',
          visible: false,
        };
        break;                   
      case 'COMP_DT':
        info = {
          title: '확정',
          name: colName,
          data: colName,
          width: '100px',
          visible: false,
        };
        break;                                      
      case 'TRIP_MST_GUID':
      case 'TRIP_DTL_GUID':
      case 'TRIP_DTL_GUID_IN_ITM':
      case 'ADDR_ORG':        
      case 'COMP_YN':
      case 'REG_EMAIL':
      case 'REG_DT':
      case 'UPDT_EMAIL':
      case 'UPDT_DT':
        info = {
          title: colName,
          name: colName,
          data: colName,          
          width: '0px',
          visible: false,
        };        
        break;
      default:        
        info = {
          title: colName,
          name: colName,
          data: colName,          
          width: '100px',
          visible: false,
        };
        break;
    }
    return info;
  };

  //첨부파일 삭제
  function deleteFile(num) {
      document.querySelector("#file" + num).remove();
      filesArr[num].is_delete = true;
  }

  //리스트 보기
  function viewList(){
    if(curMarkerInfo !== undefined){
      var tripDetailGuid = curMarkerInfo.tripDetailGuid;
      location.href = '/business/trip/detail?tripGuid=' + $("#tripGuid").val() + '&tripDetailGuid=' + tripDetailGuid;
    }
    else{
      location.href = '/business/trip/detail?tripGuid=' + $("#tripGuid").val();
    }    
  };

  //닫기
  function closeItem(){
    location.href = '/business/trip';
  };

  //카카오 지도 초기화
  function InitMap(center){
    var mapContainer = document.getElementById('map'), // 지도를 표시할 div 
    mapOption = { 
        center: center, // 지도의 중심좌표
        level: 3 // 지도의 확대 레벨
    };

    // 지도를 표시할 div와  지도 옵션으로  지도를 생성합니다
    map = new kakao.maps.Map(mapContainer, mapOption);     

    //map.relayout이 위에서 호출이 되지 않는 경우 아래 구문 호출 필요
    //최초 로드 시, display:flex로 인해 Width가 정해지지 않아서 지도 깨지는 문제가 존재함
    // setTimeout(() => {
    //   map.relayout();    // 지도의 크기가 변동이 있을 경우 함수 호출
    // }, 1000);    
  };

  //지도타입 컨트롤의 지도 또는 스카이뷰 버튼을 클릭하면 호출되어 지도타입을 바꾸는 함수입니다
  function setMapType(eThis, e) { 
      isSkyView = !isSkyView;

      //스카이뷰
      if(isSkyView){
        map.setMapTypeId(kakao.maps.MapTypeId.HYBRID);
        $(eThis).text('지도');
      }
      //지도
      else{
        map.setMapTypeId(kakao.maps.MapTypeId.ROADMAP);               
        $(eThis).text('스카이뷰');
      }
  };

  //오버레이 타입(ex.지적도)
  function setOverlayMapTypeId(eThis, e, overlayType) {
      var changeOverlayType;
      
      // maptype에 따라 지도에 추가할 지도타입을 결정합니다
      if (overlayType === 'traffic') {                        
        // 교통정보 지도타입
        changeOverlayType = kakao.maps.MapTypeId.TRAFFIC;            
      } 
      else if (overlayType === 'roadview') {                    
        // 로드뷰 도로정보 지도타입
        changeOverlayType = kakao.maps.MapTypeId.ROADVIEW;    
      } 
      else if (overlayType === 'terrain') {            
        // 지형정보 지도타입
        changeOverlayType = kakao.maps.MapTypeId.TERRAIN;    
      } 
      else if (overlayType === 'use_district') {            
        // 지적편집도 지도타입
        changeOverlayType = kakao.maps.MapTypeId.USE_DISTRICT;           
      }

      // 이미 등록된 지도 타입이 있으면 제거합니다
      if (currentOverlayTypeId) {
          map.removeOverlayMapTypeId(currentOverlayTypeId);    
      }

      //현재 타입과 동일한 버튼을 클릭했으며, ON인 상황인 경우 -> OFF
      if(currentOverlayTypeId == changeOverlayType && isOverlayOn == true){
        isOverlayOn = !isOverlayOn;
        $(eThis).removeClass('overlay-active');
      }
      else{
        isOverlayOn = true;
        $(eThis).addClass('overlay-active');

        // maptype에 해당하는 지도타입을 지도에 추가합니다
        map.addOverlayMapTypeId(changeOverlayType);        

        // 지도에 추가된 타입정보를 갱신합니다
        currentOverlayTypeId = changeOverlayType;                
      }
  };

  //말풍선 버튼
  function setSpeechBubble(eThis, e){
    isSpeechBubble = !isSpeechBubble;

    // 지도의 현재 중심좌표를 얻어옵니다 
    var center = map.getCenter();     
    
    //말풍선ON
    if(isSpeechBubble){
      $(eThis).addClass('bubble-active');
      $(eThis).text('말풍선 OFF');

      markerInfoList.forEach(element => {
        element.infowindow.open(map, element.marker); 
      });

      InitInfoWindow();
    }
    //말풍선OFF
    else{
      $(eThis).removeClass('bubble-active');  
      $(eThis).text('말풍선 ON');

      markerInfoList.forEach(element => {
        element.infowindow.close();   
      });      
    }    

    //지도 중심을 이동 시킵니다
    map.setCenter(center);    
  };

  //지도 중심을 이동 시킵니다
  function setCenter(center) {            
    // 이동할 위도 경도 위치를 생성합니다 
    var moveLatLon = new kakao.maps.LatLng(center.LNG, center.LAT);
    
    // 지도 중심을 이동 시킵니다
    map.setCenter(moveLatLon);
}

  //지도 확대, 축소 컨트롤에서 확대 버튼을 누르면 호출되어 지도를 확대하는 함수입니다
  function zoomIn() {
      map.setLevel(map.getLevel() - 1);
  };

  //지도 확대, 축소 컨트롤에서 축소 버튼을 누르면 호출되어 지도를 확대하는 함수입니다
  function zoomOut() {
      map.setLevel(map.getLevel() + 1);
  };

  //마커 그리기
  function setMarker(map, markerPos){

    var initInfowindow;

    for (var i = 0; i < markerPos.length; i ++) {
      
      // 마커에 표시할 인포윈도우를 생성합니다 
      var infowindow = new kakao.maps.InfoWindow({
          position: markerPos[i].latlng, // 마커를 표시할 위치
          content: markerPos[i].content, // 인포윈도우에 표시할 내용
          clickable: true,
      });      

      //마커 이미지를 생성
      var markerImage;

      //최초 infoWindow 등록
      if(isEmpty(initInfowindow) && markerPos[i].latlng.La == center.La && markerPos[i].latlng.Ma == center.Ma){
        //마커 색상변경
        markerImage = createMarkerImage('Y', 'N');
      }
      else if(markerPos.compYn == 'Y'){
        //마커 색상변경
        markerImage = createMarkerImage('N', 'Y');
      }
      else{
        markerImage = createMarkerImage('N', 'N');        
      }

      // 마커를 생성합니다
      var marker = new kakao.maps.Marker({
          map: map, // 마커를 표시할 지도
          position: markerPos[i].latlng, // 마커를 표시할 위치
          title : markerPos[i].title, // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다          
          image : markerImage, // 마커 이미지 
          clickable: true // 마커를 클릭했을 때 지도의 클릭 이벤트가 발생하지 않도록 설정합니다
      });

      // 마커에 클릭이벤트를 등록합니다
      kakao.maps.event.addListener(marker, 'click', clickListener(map, marker, infowindow));
      // 마커에 mouseover 이벤트와 mouseout 이벤트를 등록합니다
      // 이벤트 리스너로는 클로저를 만들어 등록합니다 
      // for문에서 클로저를 만들어 주지 않으면 마지막 마커에만 이벤트가 등록됩니다
      kakao.maps.event.addListener(marker, 'mouseover', makeOverListener(map, marker, infowindow));
      kakao.maps.event.addListener(marker, 'mouseout', makeOutListener(infowindow));       

      //마커 정보 등록
      markerInfoList.push({
        tripDetailGuid: (markerPos[i].intgYn == 'Y') ? markerPos[i].tripDetailDuplicateList[0].TRIP_DTL_GUID : markerPos[i].tripDetailGuid,
        compYn: markerPos[i].compYn,
        intgYn: markerPos[i].intgYn,
        tripDetailDuplicateList: markerPos[i].tripDetailDuplicateList,
        marker: marker,
        infowindow: infowindow,
      });      

      //최초 infoWindow 등록
      if(isEmpty(initInfowindow) && markerPos[i].latlng.La == center.La && markerPos[i].latlng.Ma == center.Ma){
        initInfowindow = infowindow;
        initMarker = marker;
      }
    }    

    //최초 infoWindow 표시
    if(!isEmpty(initInfowindow)){
      initInfowindow.open(map, initMarker);
    }    
  };

  //마커 클릭 이벤트
  function clickListener(map, marker, infowindow){
    // 마커 위에 인포윈도우를 표시합니다 
    return function() {
      var tmpCurMarkerInfo = markerInfoList.find(x => x.marker == marker);
      markerInfoList.forEach(element => {
        if(element.marker == tmpCurMarkerInfo.marker){

          //통합인 경우 infoWindow
          if(tmpCurMarkerInfo.intgYn == 'Y'){
            curMarkerInfo = tmpCurMarkerInfo;
            openModalDuplicateMarker();
          }         
          //이전과 동일한 경우, 상세 페이지 오픈 
          else if(curMarkerInfo !== undefined && curMarkerInfo.marker == tmpCurMarkerInfo.marker){
            getItem(tmpCurMarkerInfo.tripDetailGuid);
          }

          infowindow.open(map, tmpCurMarkerInfo.marker);          
          
          //그리드 Row 선택 및 이동
          var rowIndex = table.row(searchFunction({TRIP_DTL_GUID:tmpCurMarkerInfo.tripDetailGuid})).index();
          table.row(rowIndex).scrollTo().select();

          //지도 위치이동
          var position = tmpCurMarkerInfo.marker.getPosition();
          var moveLatLon = new kakao.maps.LatLng(position.Ma, position.La);
          map.setCenter(moveLatLon);          

          //마커 색상변경
          var clickImage = createMarkerImage('Y', 'N', 'N');
          tmpCurMarkerInfo.marker.setImage(clickImage);       
        }
        else{
          if(!isSpeechBubble){
            element.infowindow.close(); 
          }          
          
          //마커 색상변경
          var selectImage = selectMarkerImage(element.compYn, element.intgYn, element.tripDetailDuplicateList);
          element.marker.setImage(selectImage);                
        } 
      });        
      
      curMarkerInfo = tmpCurMarkerInfo;
      InitInfoWindow();      
    };    
  };

  //인포윈도우를 표시하는 클로저를 만드는 함수입니다 
  function makeOverListener(map, marker, infowindow) {
    return function() {
        infowindow.open(map, marker);        
        InitInfoWindow();
    };
  }

  //인포윈도우를 닫는 클로저를 만드는 함수입니다 
  function makeOutListener(infowindow) {
    return function() {
        if(!isSpeechBubble && curMarkerInfo !== undefined && !(curMarkerInfo.infowindow == infowindow)){
          infowindow.close();
        }        
    };
  }

  //모두의 출장 상세 핀 목록 가져오기
  function getDetailListForPin(){
    $.ajax({
        url: '/business/trip/getTripDetailListForPin',
        method: 'post',
        data: {
          'tripGuid': $("#tripGuid").val()
        },
        success: function(data){
          if(data.success){
            markerPos = [];
            var tripDetailList = data.value;            
            for(var i=0; i < tripDetailList.length; i++){
              var tripDetailGuid = tripDetailList[i].TRIP_DTL_GUID;
              var title = tripDetailList[i].FCLT_NM;
              var latitude = tripDetailList[i].LAT;
              var longitude = tripDetailList[i].LNG;
              var compYn = tripDetailList[i].COMP_YN;
              var intgYn = tripDetailList[i].INTG_YN;
              var tripDetailDuplicateList = tripDetailList[i].TRIP_DTL_LIST;
              markerPos.push(createMarker(tripDetailGuid, title, latitude, longitude, compYn, intgYn, tripDetailDuplicateList));

              //최초 마커 등록
              if(isEmpty(center) && latitude != 0 && longitude != 0){                
                center = new kakao.maps.LatLng(latitude, longitude);
              }
            }
            InitMap(center);
            setMarker(map, markerPos);

            if(initTripDetailGuid != '') {
              var markerInfo = markerInfoList.find(x => x.tripDetailGuid == initTripDetailGuid);
              MoveMarker(markerInfo, initTripDetailGuid);
              curMarkerInfo = markerInfo;              
            }
            else{
              curMarkerInfo = markerInfoList[0];
            }            
          }    
          else{
            InitMap(new kakao.maps.LatLng(33.450701, 126.570667));
            setMarker(map, markerPos);
          }
        },
        beforeSend: function (xhr) {
          // setLoadingBar(true);
        },
        complete: function () {
          // setLoadingBar(false);          
          map.relayout();
          InitInfoWindow();
        }   
    });    
  };

  //마커 제작
  function createMarker(tripDetailGuid, title, lat, lng, compYn, intgYn, tripDetailDuplicateList){
    let content = '';
    if(intgYn == 'Y'){      
      var count = tripDetailDuplicateList.length;
      title = tripDetailDuplicateList[0].FCLT_NM;
      content = setInfowindowContent(title, count);;
    }
    else{
      content = setInfowindowContent(title);
    }

    let obj = {
      tripDetailGuid: tripDetailGuid,
      title: title,
      compYn: compYn,
      intgYn: intgYn,
      tripDetailDuplicateList: tripDetailDuplicateList,
      content: content,
      latlng: new kakao.maps.LatLng(lat, lng)
    };
    return obj;
  };

  //중복 마커 선택창 열기
  function openModalDuplicateMarker(){
    //DataTable.js
    tableMarkers = DataTableForMarkers('tblMarkers', curMarkerInfo.tripDetailDuplicateList);

    //현재 출장 상세 ROW Select
    var rowIndex = tableMarkers.row(searchFunction({TRIP_DTL_GUID:curMarkerInfo.tripDetailGuid})).index();
    tableMarkers.row(rowIndex).select();    

    $("#modalDuplicateMarker").modal('show');
  };

  //중복 마커 선택
  function selectDuplicateMarker(eThis, e){
    e.preventDefault();

    let selectedRowData = tableMarkers.row({ selected: true }).data();
    let facilityName = selectedRowData.FCLT_NM;
    let tripDetailGuid = selectedRowData.TRIP_DTL_GUID;

    //그리드 Row 이동 및 선택
    var rowIndex = table.row(searchFunction({TRIP_DTL_GUID:tripDetailGuid})).index();
    table.row(rowIndex).scrollTo().select();

    //지도 위치이동
    var position = curMarkerInfo.marker.getPosition();
    var moveLatLon = new kakao.maps.LatLng(position.Ma, position.La);
    map.setCenter(moveLatLon);          

    //infoWindow 변경
    var text = setInfowindowContent(facilityName, curMarkerInfo.tripDetailDuplicateList.length);    
    curMarkerInfo.infowindow.setContent(text);

    //curMarkerInfo 변경
    curMarkerInfo.tripDetailGuid = tripDetailGuid;

    $("#modalDuplicateMarker").modal('hide');

    //해당 상세 열기
    getItem(curMarkerInfo.tripDetailGuid);
  };

  //중목 마커 그리드
  function DataTableForMarkers(tblId, data){
    var table = new DataTable('#' + tblId, {
      columns: [
        {title: '', data : null, name: 'CHK', width: "50px", visible: true },
        {title: '명칭', name: 'FCLT_NM', data : "FCLT_NM", width: '80px' },
        {title: '주소', name: 'ADDR', data : "ADDR", width: 'auto'},   
        {title: '상세 주소', name: 'ADDR_DTL', data : "ADDR_DTL", width: 'auto'},
        {title: '', name: 'TRIP_DTL_GUID', data : "TRIP_DTL_GUID", width: '0px', visible: false},   
      ],
      columnDefs: [
        { targets: "_all", className: "header" },
        { targets: 0, orderable: false, render: DataTable.render.select(), },        
        { targets: ['FCLT_NM:name', 'ADDR:name'], className: "row-left-align align-middle" },
      ],
      data: data,
      language : getLanguage(),
      paging: false,
      lengthChange: true,
      searching: false,
      ordering: false,
      info: false,   
      fixedColumns: {
        start: 2
      },    
      select: {
        style: 'single',
        items: 'row',
      },                         
      scrollX: false,
      scrollY: '200px',
      //responsive: false,
      scrollCollapse: true,
      autoWidth: true,
      destroy: true,
      layout: {
        topStart: null,
        topEnd: null,
      },
    });

    return table;
  };

  //JS-InfoWindow CSS 강제변경 (지도 DATA 불러온 이후 실행필요)
  function InitInfoWindow(){
    var infoTitle = document.querySelectorAll('.info-title');
    infoTitle.forEach(function(e) {
        var w = e.offsetWidth;
        var ml = w/2;
        e.parentElement.style.top = "0px";
        e.parentElement.style.left = "50%";
        e.parentElement.style.marginLeft = -ml+"px";
        e.parentElement.style.width = w+"px";
        e.parentElement.previousSibling.style.display = "none";
        e.parentElement.parentElement.style.border = "0px";
        e.parentElement.parentElement.style.background = "unset";
    });    
  }

  //중복 좌표인지 확인
  function selectMarkerImage(compYn, intgYn, tripDetailDuplicateList){
    if(intgYn == 'Y'){
      var isComp = !(tripDetailDuplicateList.map(x => x.COMP_YN).includes('N'));

      //통합:확정
      if(isComp){
        return createMarkerImage('N', 'Y', 'N');        
      }
      //통합:확정x
      else{
        return createMarkerImage('N', 'N', 'Y');        
      }
    }
    //확정
    else if(compYn == 'Y'){      
      return createMarkerImage('N', 'Y', 'N');
    }
    //기본
    else{
      return createMarkerImage('N', 'N', 'N');
    }
  };

  // MakrerImage 객체를 생성하여 반환하는 함수입니다
  function createMarkerImage(curMarkerYn, compYn, duplicatePosYn) {
    var imageSrc = ""; // 마커 이미지의 이미지 주소
    var imageSize = new kakao.maps.Size(42, 42);  //마커 이미지 크기

    //현재 선택한 마커
    if(curMarkerYn == 'Y'){
      imageSrc = "/images/marker_blue.png";
    }
    //완료된 마커
    else if(compYn == 'Y'){
      imageSrc = "/images/marker_gray.png";
    }
    //중복주소 마커
    else if(duplicatePosYn == 'Y'){
      imageSrc = "/images/marker_red.png";
    }    
    //기본 마커
    else {
      imageSrc = "/images/marker_green.png";
    }

    var markerImage = new kakao.maps.MarkerImage(
        imageSrc,     // 이미지 URL
        imageSize, // 마커의 크기
    );
    
    return markerImage;
  };

  //InfowWindow Content 제작
  function setInfowindowContent(title, count){
    if(count > 0){
      return "<span class='info-title duplicate' onclick='openModalDuplicateMarker();'>" + title + "외 " + (count) + "개</span>";
    }
    else{
      return "<span class='info-title'>" + title + "</span>";
    }
  };

  //마커 이동(infowWindow 변경, 위치이동, 마커색상변경)
  function MoveMarker(markerInfo, tripDetailGuid){
      var tripDetailDuplicateList;

      //중복인 경우
      if(markerInfo === undefined){
        markerInfo = markerInfoList.find(x => x.tripDetailDuplicateList != null && x.tripDetailDuplicateList.find(y => y.TRIP_DTL_GUID == tripDetailGuid))
        tripDetailDuplicateList = markerInfo.tripDetailDuplicateList
        //markerInfo.tripDetaiol = tripDetailDuplicateList.find(x => x.TRIP_DTL_GUID == tripDetailGuid);        
      }

      if(!isEmpty(markerInfo.marker)){
        //위치이동
        var position = markerInfo.marker.getPosition();
        var infowindow = markerInfo.infowindow;
        var moveLatLon = new kakao.maps.LatLng(position.Ma, position.La);
        map.setCenter(moveLatLon);                

        markerInfoList.forEach(element => {
          //현재 선택한 Marker
          if(element.marker == markerInfo.marker){

            if(markerInfo.intgYn == 'Y'){
              //InfoWindow Text변경
              var text = markerInfo.tripDetailDuplicateList.find(x => x.TRIP_DTL_GUID == tripDetailGuid).FCLT_NM;
              text = setInfowindowContent(text, markerInfo.tripDetailDuplicateList.length);
              element.infowindow.setContent(text);
            }
            infowindow.open(map, markerInfo.marker);
            curMarkerInfo = element;
            
            //마커 색상변경
            var clickImage = createMarkerImage('Y', 'N', 'N');
            element.marker.setImage(clickImage);
          }
          // 그 외
          else{            
            var selectImage = selectMarkerImage(element.compYn, element.intgYn, element.tripDetailDuplicateList);
            element.marker.setImage(selectImage);

            //말풍선 켜진 경우, InfoWindow 이벤트 발생하지 않음
            if(isSpeechBubble){
              return;
            }
            else{
              element.infowindow.close();                 
            }            
          }          
          InitInfoWindow();
        });       
      }
  };

  //마커 이동하기
  function moveMap(map, latitude, longitude){
    // 이동할 위도 경도 위치를 생성합니다 
    var moveLatLon = new kakao.maps.LatLng(latitude, longitude);
    
    // 지도 중심을 이동 시킵니다
    map.setCenter(moveLatLon);
  };

  //HTML5 GeoLocation 이용해서 접속위치를 가져오기
  function setGeoLocation(eThis, e){
    if(navigator.geolocation){
      navigator.geolocation.getCurrentPosition(function(position) {
        moveMap(map, position.coords.latitude, position.coords.longitude);
      });
    }
  }

</script>